name: Test

on:
  pull_request:
    branches:
      - main
    paths:
      - 'config.yaml'
    types:
      - opened
      - reopend
      - synchronize
  workflow_dispatch:

jobs:
  test:
    runs-on: arc-runner-set
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup yq
        run: |
          mkdir -p ${{ github.workspace }}/bin
          wget https://github.com/mikefarah/yq/releases/download/v4.31.1/yq_linux_386 -O ${{ github.workspace }}/bin/yq
          chmod +x ${{ github.workspace }}/bin/yq
          echo ${{ github.workspace }}/bin >> $GITHUB_PATH

      - name: Setup docker-compose
        run: |
          mkdir -p ${{ github.workspace }}/bin
          wget https://github.com/docker/compose/releases/download/v2.17.1/docker-compose-linux-x86_64 -O ${{ github.workspace }}/bin/docker-compose
          chmod +x ${{ github.workspace }}/bin/docker-compose
          echo ${{ github.workspace }}/bin >> $GITHUB_PATH

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Setup pip
        run: |
          pip install numpy
          pip install scipy
          pip install matplotlib
          pip install msgpack-rpc-python
          pip install airsim

      - name: Parse config.yaml
        run: |
          DOCKER_REGISTORY=`yq eval '.registory' config.yaml`
          SIMULATOR_REPOS=`yq eval '.images.simulator.repository' config.yaml`
          SIMULATOR_TAG=`yq eval '.images.simulator.tag' config.yaml`
          BRIDGE_REPOS=`yq eval '.images.bridge.repository' config.yaml`
          BRIDGE_TAG=`yq eval '.images.bridge.tag' config.yaml`
          CONTROLLER_REPOS=`yq eval '.images.linetrace_control.repository' config.yaml`
          CONTROLLER_TAG=`yq eval '.images.linetrace_control.tag' config.yaml`
          echo DOCKER_REGISTORY=${DOCKER_REGISTORY} >> $GITHUB_ENV
          echo SIMULATOR_IMAGE=${DOCKER_REGISTORY}/${SIMULATOR_REPOS}:${SIMULATOR_TAG} >> $GITHUB_ENV
          echo BRIDGE_IMAGE=${DOCKER_REGISTORY}/${BRIDGE_REPOS}:${BRIDGE_TAG} >> $GITHUB_ENV
          echo CONTROLLER_IMAGE=${DOCKER_REGISTORY}/${CONTROLLER_REPOS}:${CONTROLLER_TAG} >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTORY }}

      - name: Pull Docker Images
        run: |
          docker pull ${{ env.SIMULATOR_IMAGE }}
          docker pull ${{ env.BRIDGE_IMAGE }}
          docker pull ${{ env.CONTROLLER_IMAGE }}

      - name: Run Simulation
        env:
          SIMULATOR_IMAGE: ${{ env.SIMULATOR_IMAGE }}
          BRIDGE_IMAGE: ${{ env.BRIDGE_IMAGE }}
          CONTROLLER_IMAGE: ${{ env.CONTROLLER_IMAGE }}
        working-directory: test
        run: |
          export SIMULATOR_ENV='./simulator_env.json'
          docker-compose -f docker-compose_headless.yaml up -d
          sleep 10
          python3 recording.py start
          python3 test.py
          python3 recording.py stop
          sleep 10
          docker-compose -f docker-compose_headless.yaml cp simulator:/home/simuser/Documents/AirSim/ ${{ runner.temp }}/AirSim/
          docker-compose -f docker-compose_headless.yaml down

      - name: Verify Simulation Result
        working-directory: test
        run: |
          python3 verify_flight_path.py \
            -sp ./simulator_env.json \
            -fl ${{ runner.temp }}/AirSim/*/airsim_rec.txt \
            -png ${{ runner.temp }}/verify_result.png

      - name: Copy Result
        if: ${{ always() }}
        run: |
          mkdir ${{ runner.temp }}/result
          cp ${{ runner.temp }}/AirSim/*/airsim_rec.txt ${{ runner.temp }}/result
          cp -r ${{ runner.temp }}/AirSim/*/images ${{ runner.temp }}/result
          cp ${{ runner.temp }}/verify_result.png ${{ runner.temp }}/result

      - name: Upload Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: simulation_result
          path: ${{ runner.temp }}/result
